// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// npx prisma migrate dev
// npx prisma generate

model Category {
  id         String @id @default(uuid())
  titleEng   String @default("")
  titleEsp   String @default("")
  coverPhoto String @default("")

  products Product[]
}

model Product {
  id             String  @id @default(uuid())
  titleEng       String
  titleEsp       String
  isFeatured     Boolean
  isObo          Boolean @default(false)
  isPending      Boolean @default(false)
  price          String  @default("0")
  offer          String  @default("0")
  descriptionEng String  @default("")
  descriptionEsp String  @default("")

  photos Photo[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

model Photo {
  id             String  @id @default(uuid())
  title          String
  url            String
  isFeaturePhoto Boolean @default(false)

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Order {
  id       String @id @default(uuid())
  name     String
  phone    String
  language String
  total    String @default("0")

  createdAt DateTime  @default(now())
  products  Product[]
}

model Vehicle {
  id             String         @id @default(uuid())
  isObo          Boolean        @default(false)
  isPending      Boolean        @default(false)
  year           String
  make           String
  model          String
  mileage        String
  kilometers     String
  fuelEng        String
  fuelEsp        String
  seats          String
  engine         String
  drivetrain     String
  transmission   String         @default("")
  type           String
  colorEng       String         @default("")
  colorEsp       String         @default("")
  price          String
  descriptionEng String         @default("")
  descriptionEsp String         @default("")
  photos         VehiclePhoto[]
}

model VehiclePhoto {
  id             String  @id @default(uuid())
  title          String
  url            String
  isFeaturePhoto Boolean @default(false)

  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?
}
