import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const test = trpc.product.featured.useQuery();
  console.log(test.data);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-white">
        <div className="container flex flex-col items-center justify-center gap-12 py-16 ">
          {test.data?.map((item) => (
            <div
              key={item.id}
              className="relative flex w-full flex-col justify-between overflow-hidden object-contain"
            >
              <div className="relative h-[257px] w-full overflow-hidden">
                {item.photos.map((photo) => (
                  <Image
                    className="object-cover"
                    fill
                    src={photo.url}
                    alt={photo.title}
                    key={photo.id}
                  />
                ))}
              </div>

              <div className="absolute bottom-0 left-0 w-2/3 -translate-x-1 skew-x-12 border-r-4 border-r-blue-500 bg-gray-200">
                <h4 className="mx-4 my-1 -skew-x-12 text-sm font-medium tracking-wide text-gray-700">
                  {item.title}
                </h4>
              </div>
            </div>
          ))}

          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-black">
              {test.data ? test.data[0]?.title : "Loading tRPC query..."}
            </p>
            {/* <AuthShowcase /> */}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
